"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[566],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),p=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,u=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,h=c["".concat(u,".").concat(m)]||c[m]||s[m]||l;return n?r.createElement(h,o(o({ref:t},d),{},{components:n})):r.createElement(h,o({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=c;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5832:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return s}});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),o=["components"],i={id:"field",title:"Field",sidebar_position:2},u=void 0,p={unversionedId:"components/field",id:"components/field",title:"Field",description:"Field component is a wrapper for your form elements / fields.",source:"@site/docs/components/field.md",sourceDirName:"components",slug:"/components/field",permalink:"/react-swift-form/components/field",editUrl:"https://github.com/ugur-eren/react-swift-form/tree/main/docs/docs/components/field.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"field",title:"Field",sidebar_position:2},sidebar:"docs",previous:{title:"Form",permalink:"/react-swift-form/components/form"},next:{title:"ReadField",permalink:"/react-swift-form/components/read-field"}},d={},s=[{value:"Examples",id:"examples",level:2},{value:"Simple Field",id:"simple-field",level:3},{value:"Custom change handler",id:"custom-change-handler",level:3},{value:"Functional updates",id:"functional-updates",level:3},{value:"Show error",id:"show-error",level:3},{value:"Set error manually",id:"set-error-manually",level:3},{value:"All together",id:"all-together",level:3},{value:"Props",id:"props",level:2},{value:"id",id:"id",level:3},{value:"Children Props",id:"children-props",level:2},{value:"value",id:"value",level:3},{value:"error",id:"error",level:3},{value:"changeValue",id:"changevalue",level:3},{value:"changeError",id:"changeerror",level:3}],c={toc:s};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Field component is a wrapper for your form elements / fields.\nYou can use it to render any react element that depends on the value and the change handler of the form element."),(0,l.kt)("h2",{id:"examples"},"Examples"),(0,l.kt)("h3",{id:"simple-field"},"Simple Field"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"changeValue")," can be used to change the value of a form element.\nSince it's a plain function, you can directly pass it to the TextInput."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import {Field} from 'react-swift-form';\nimport {TextInput} from 'react-native';\n\nfunction MyForm() {\n  return (\n    <Field id=\"name\">\n      {({value, changeValue}) => (\n        <TextInput value={value} onChangeText={changeValue} />\n      )}\n    </Field>\n  );\n}\n")),(0,l.kt)("h3",{id:"custom-change-handler"},"Custom change handler"),(0,l.kt)("p",null,"If you want to use a custom change handler, you can directly call ",(0,l.kt)("inlineCode",{parentName:"p"},"changeValue")," function."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import {Field} from 'react-swift-form';\nimport {Switch} from 'react-native';\n\nfunction MyForm() {\n  return (\n    <Field id=\"name\">\n      {({value, changeValue}) => (\n        <Switch value={value} onValueChange={() => changeValue(!value)} />\n      )}\n    </Field>\n  );\n}\n")),(0,l.kt)("h3",{id:"functional-updates"},"Functional updates"),(0,l.kt)("p",null,"If the new value is computed using the previous value,\nyou can also use ",(0,l.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-reference.html#functional-updates"},"functional updates")," to update the value of a form element.\nJust like how you do with ",(0,l.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-reference.html#functional-updates"},"setState action of useState hook"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import {Field} from 'react-swift-form';\nimport {Switch} from 'react-native';\n\nfunction MyForm() {\n  return (\n    <Field id=\"name\">\n      {({value, changeValue}) => (\n        <Switch value={value} onValueChange={() => changeValue(prev => !prev)} />\n      )}\n    </Field>\n  );\n}\n")),(0,l.kt)("h3",{id:"show-error"},"Show error"),(0,l.kt)("p",null,"If you want to show errors, you can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"error")," value.\nThis value is set by the ",(0,l.kt)("a",{parentName:"p",href:"form#validator"},(0,l.kt)("inlineCode",{parentName:"a"},"validator")),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import {Field} from 'react-swift-form';\nimport {TextInput, Text} from 'react-native';\n\nfunction MyForm() {\n  return (\n    <Field id=\"name\">\n      {({value, error, changeValue}) => (\n        <>\n          <TextInput value={value} onChangeText={changeValue} />\n          <Text>{error}</Text>\n        </>\n      )}\n    </Field>\n  );\n}\n")),(0,l.kt)("h3",{id:"set-error-manually"},"Set error manually"),(0,l.kt)("p",null,"You can also set the error manually. However, this is not recommended. You should use the ",(0,l.kt)("a",{parentName:"p",href:"form#validator"},(0,l.kt)("inlineCode",{parentName:"a"},"validator"))," prop instead."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import {Field} from 'react-swift-form';\nimport {Switch, Text} from 'react-native';\n\nfunction MyForm() {\n  return (\n    <Field id=\"name\">\n      {({value, error, changeValue, changeError}) => (\n        <>\n          <TextInput\n            value={value}\n            onChangeText={(text) => {\n              changeValue(text);\n\n              if (value === 'not-valid') {\n                changeError('This is not valid');\n              } else {\n                changeError('');\n              }\n            }}\n          />\n          <Text>{error}</Text>\n        </>\n      )}\n    </Field>\n  );\n}\n")),(0,l.kt)("h3",{id:"all-together"},"All together"),(0,l.kt)("p",null,"Now we will use all of the above features together."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"(Except changeError)")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import {Field} from 'react-swift-form';\nimport {TextInput, Text} from 'react-native';\nimport {string} from 'yup';\n\nconst initialValues = {\n  name: '',\n};\n\nconst validators = {\n  name: string()\n    .required('This is required')\n    .test('is-valid', 'This is not valid', (value) => value === 'not-valid'),\n};\n\nfunction MyForm() {\n  return (\n    <Form initialState={initialValues} validators={validators}>\n      <Field id=\"name\">\n        {({value, error, changeValue}) => (\n          <>\n            <TextInput value={value} onChangeText={changeValue} />\n            <Text>{error}</Text>\n          </>\n        )}\n      </Field>\n    </Form>\n  );\n}\n")),(0,l.kt)("h2",{id:"props"},"Props"),(0,l.kt)("h3",{id:"id"},"id"),(0,l.kt)("div",{class:"required"},"Required"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"id")," prop is the unique identifier of the form element. It will be used to identify the form field in the context."),(0,l.kt)("p",null,"This value should be unique to the form ",(0,l.kt)("em",{parentName:"p"},"(unless you want to use the same form field multiple times)"),"."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("div",{class:"required as-badge"},"Required"))))),(0,l.kt)("h2",{id:"children-props"},"Children Props"),(0,l.kt)("p",null,"These props are passed to the children."),(0,l.kt)("h3",{id:"value"},"value"),(0,l.kt)("p",null,"Current value of the form field."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"string")))),(0,l.kt)("h3",{id:"error"},"error"),(0,l.kt)("p",null,"Error message for the field. It's set by the ",(0,l.kt)("a",{parentName:"p",href:"form#validator"},(0,l.kt)("inlineCode",{parentName:"a"},"validator"))," or ",(0,l.kt)("a",{parentName:"p",href:"#changeerror"},(0,l.kt)("inlineCode",{parentName:"a"},"changeError"))," function."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"string")))),(0,l.kt)("h3",{id:"changevalue"},"changeValue"),(0,l.kt)("p",null,"Changes the value of the form field.\nIt will accept the new state or a function that will be called with the previous state as a parameter.\nJust like how you would use ",(0,l.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-reference.html#functional-updates"},(0,l.kt)("inlineCode",{parentName:"a"},"setState")," function of a useState hook"),"."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"(value: any ","|"," ((prevValue: any) => any)) => void")))),(0,l.kt)("h3",{id:"changeerror"},"changeError"),(0,l.kt)("p",null,"Changes the error of the form field.\nIt's not recommended to use this function.\nYou will not need to use this function if you are using the validator prop."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"(error: string) => void")))))}m.isMDXComponent=!0}}]);